#!/usr/bin/env python3
from jarvis_cd.exec_node import ExecNode
import os, sys
import json
import shutil

class ArgumentParser:
    def __init__(self):
        self._args = {}
        return

    def help(self, terminate=True):
        print("Usage:")
        print("qemu_manage new_disk [disk_name] [disk_size (K/M/G)]")
        print("qemu_manage clone_disk [disk_name] [new_disk_name]")
        print("qemu_manage rm_disk [disk_name]")
        print("qemu_manage new_vm [vm_name]")
        print("qemu_manage new_vm_script")
        print("qemu_manage clone_vm [vm_name] [count]")
        print("qemu_manage rm_vm [vm_name]")
        print("qemu_manage list_vms")
        print("qemu_manage list_disks")
        print("qemu_mange start_vm [vm_name]")
        print("qemu_manage ssh_forward [vm_name] [host_port]")
        print("qemu_manage insert_iso [vm_name] [iso_path]")
        print("qemu_manage remove_iso [vm_name]")
        print("qemu_manage attach_disk [vm_name] [disk_type] [disk_name]")
        print("qemu_manage list_disks [vm_name]")
        print("qemu_manage detach_disk [vm_name] [disk_type] [disk_name]")
        print("qemu_manage set_ram [vm_name] [size (K/M/G)]")
        print("qemu_manage set_cores [vm_name] [num_cores]")
        print("qemu_manage set_graphics [vm_name] [graphics_mode]")
        print("qemu_manage ssh [vm_name] [username]")
        print("qemu_manage install_keys [vm_name] [username] [key_dir] [key_name]")
        if terminate:
            exit(1)

    def run(self):
        if len(sys.argv) < 2:
            self.help()
        self.option = sys.argv[1]
        self.inputs = sys.argv[2:]
        return self

class QemuVM:
    def __init__(self, vm_name):
        self.root = os.getenv("QEMU_MANAGE_ROOT")
        self.device_root = os.path.join(self.root, "disks")
        self.schema_root = os.path.join(self.root, "vms")
        self.schema_path = os.path.join(self.schema_root, f'{vm_name}_schema.json')
        self.vm_name = vm_name
        self.schema = {}
        self.LoadSchema()
        return

    def LoadSchema(self):
        if os.path.exists(self.schema_path):
            with open(self.schema_path, 'r') as fp:
                self.schema.update(json.load(fp))
        else:
            self.schema = {
                "name": {
                    "name": self.vm_name,
                    "command": f'-name {self.vm_name}'
                }
            }

    def CopySchema(self, other):
        self.schema = other.schema

    def SaveSchema(self):
        with open(self.schema_path, 'w') as fp:
            json.dump(self.schema, fp, indent=4)

    def _count_disks_of_type(self, disk_type):
        return sum(disk['disk_type'] == disk_type for disk in self.schema['disks'])

    def AttachDisk(self, disk_type, disk_name):
        if "disks" not in self.schema:
            self.schema["disks"] = []
        disk_id = self._count_disks_of_type(disk_type)
        disk_path = os.path.join(self.device_root, f'{disk_name}.qcow2')
        if disk_type == 'nvme':
            command = f'-drive file={disk_path},if=none,id={disk_name} -device nvme,serial=deadbeef,drive={disk_name}'
        if disk_type == 'sata':
            command = f'-drive file={disk_path},if=none,id={disk_name} -device ahci,id=ahci -device ide-hd,drive={disk_name},bus=ahci.{disk_id}'
        if disk_type == 'pmem':
            command = f'-drive file={disk_path},if=none,id={disk_name} -device nvdimm,memdev={disk_name},id={disk_name + "#dimm"}'
        self.schema["disks"].append({
            "disk_type": disk_type,
            "disk_name": disk_name,
            "disk_path": disk_path,
            "disk_id": disk_id,
            "command": command
        })

    def DetachDisk(self, disk_name):
        for i in range(len(self.schema["disks"])):
            if self.schema["disks"][i]["disk_name"] == disk_name:
                del self.schema["disks"][i]
                break

    def ListDisks(self):
        print(json.dumps(self.schema["disks"], indent=4))

    def InsertISO(self, iso_path):
        self.schema["cdrom"] = {
            "cdrom": iso_path,
            "command": f'-cdrom {iso_path}'
        }

    def RemoveISO(self, iso_path):
        del self.schema["cdrom"]

    def SetSSHForwarding(self, port):
        self.schema["ssh_forward"] = {
            "port": int(port),
            "command": f'-net nic -net user,hostfwd=tcp::{port}-:22'
        }

    def SetRAM(self, size):
        self.schema["ram_size"] = {
            "size": size,
            "command": f'-m {size}'
        }

    def SetNumCPU(self, num_cpus):
        self.schema["num_cpus"] = {
            "num_cpus": num_cpus,
            "command": f'-smp {num_cpus}'
        }

    def SetGraphics(self, graphics_mode):
        self.schema["graphics_mode"] = {
            "mode": graphics_mode,
            "command": f'-display {graphics_mode}'
        }

    def BuildCommand(self):
        command = ["qemu-system-x86_64", "-machine accel=kvm", "-vnc :0"]
        if "name" in self.schema:
            command.append(self.schema["name"]["command"])
        if "disks" in self.schema:
            for disk_dict in self.schema["disks"]:
                command.append(disk_dict["command"])
        if "cdrom" in self.schema:
            command.append(self.schema["cdrom"]["command"])
        if "ssh_forward" in self.schema:
            command.append(self.schema["ssh_forward"]["command"])
        if "ram_size" in self.schema:
            command.append(self.schema["ram_size"]["command"])
        if "num_cpus" in self.schema:
            command.append(self.schema["num_cpus"]["command"])
        if "graphics_mode" in self.schema:
            command.append(self.schema["graphics_mode"]["command"])
        return " ".join(command)

    def GetPort(self):
        return self.schema["ssh_forward"]["port"]

class QemuManager:
    def __init__(self):
        self.root = os.getenv("QEMU_MANAGE_ROOT")
        self.device_root = os.path.join(self.root, "disks")
        self.schema_root = os.path.join(self.root, "vms")

    def CreateDisk(self, dev_name, dev_size):
        device_path = os.path.join(self.device_root, f"{dev_name}.qcow2")
        if not os.path.exists(device_path):
            ExecNode('ImageCreate', f'qemu-img create -f qcow2 {device_path} {dev_size}', collect_output=False).Run()
        else:
            ExecNode('ImageCreate', f'qemu-img resize -f qcow2 {device_path} {dev_size}', collect_output=False).Run()

    def CloneDisk(self, dev_name, new_dev_name):
        device_path = os.path.join(self.device_root, f"{dev_name}.qcow2")
        new_device_path = os.path.join(self.device_root, f"{new_dev_name}.qcow2")
        shutil.copyfile(device_path, new_device_path)

    def RemoveDisk(self, dev_name):
        device_path = os.path.join(self.device_root, f"{dev_name}.qcow2")
        if os.path.exists(device_path):
            os.remove(device_path)

    def CreateVM(self, vm_name):
        vm = QemuVM(vm_name)
        vm.SaveSchema()

    def CloneVM(self, vm_name, count):
        count = int(count)
        vm = QemuVM(vm_name)
        for i in range(count):
            cloned_vm_name = f'{vm_name}_{i+1}'
            print(f'Creating VM {cloned_vm_name}')
            cloned_vm = QemuVM(cloned_vm_name)
            cloned_vm.CopySchema(vm)
            #Clone the disks
            if 'disks' in cloned_vm.schema:
                for disk in cloned_vm.schema['disks']:
                    disk_name = disk['disk_name']
                    print(f'Cloning Disk {disk_name}')
                    cloned_disk_name = f'{disk_name}_{i+1}'
                    cloned_disk_type = disk['disk_type']
                    self.CloneDisk(disk_name, cloned_disk_name)
                    cloned_vm.DetachDisk(disk_name)
                    cloned_vm.AttachDisk(cloned_disk_name, cloned_disk_type)
            #Change the SSH forwarding port
            if 'ssh_forward' in cloned_vm.schema:
                vm_ssh = int(cloned_vm['ssh_forward']['port'])
                cloned_vm.SetSSHForwarding(vm_ssh + i + 1)
                print(f'{cloned_vm_name}: SSH port {vm_ssh + i + 1}')
        vm.SaveSchema()

    def StartVM(self, vm_name):
        vm = QemuVM(vm_name)
        command = vm.BuildCommand()
        print(command)
        ExecNode('StartVM', command, collect_output=False).Run()

    def RemoveVM(self, vm_name):
        schema_path = os.path.join(self.schema_root, vm_name)
        if os.path.exists(schema_path):
            os.path.remove(schema_path)

    def ListVMs(self):
        for item in os.listdir(self.schema_root):
            print(item)

    def ListDisks(self, inputs):
        if len(inputs) == 0:
            for item in os.listdir(self.device_root):
                print(item)
        else:
            vm_name = inputs[0]
            vm = QemuVM(vm_name)
            vm.ListDisks()

    def AttachDisk(self, vm_name, disk_type, disk_name):
        vm = QemuVM(vm_name)
        vm.AttachDisk(disk_type, disk_name)
        vm.SaveSchema()

    def DetachDisk(self, vm_name, disk_name):
        vm = QemuVM(vm_name)
        vm.DetachDisk(disk_name)
        vm.SaveSchema()

    def InsertISO(self, vm_name, iso_path):
        vm = QemuVM(vm_name)
        vm.InsertISO(iso_path)
        vm.SaveSchema()

    def RemoveISO(self, vm_name):
        vm = QemuVM(vm_name)
        vm.RemoveISO()
        vm.SaveSchema()

    def SetSSHForwarding(self, vm_name, port):
        vm = QemuVM(vm_name)
        vm.SetSSHForwarding(port)
        vm.SaveSchema()

    def SetRAM(self, vm_name, size):
        vm = QemuVM(vm_name)
        vm.SetRAM(size)
        vm.SaveSchema()

    def SetNumCPU(self, vm_name, num_cpus):
        vm = QemuVM(vm_name)
        vm.SetNumCPU(num_cpus)
        vm.SaveSchema()

    def SetGraphics(self, vm_name, graphics_mode):
        vm = QemuVM(vm_name)
        vm.SetGraphics(graphics_mode)
        vm.SaveSchema()

    def SSH(self, vm_name, username):
        vm = QemuVM(vm_name)
        port = vm.GetPort()
        print(f'ssh -p {port} {username}@localhost')

    def InstallKeys(self, vm_name, username, key_dir, key_name):
        vm = QemuVM(vm_name)
        port = vm.GetPort()
        pubkey_path = os.path.join(key_dir, f'{key_name}.pub')
        privkey_path = os.path.join(key_dir, key_name)
        print(f'ssh-copy-id -f -i {privkey_path} -p {port} {username}@localhost')
        print(f'scp -P {port} {pubkey_path} {username}@localhost:~/.ssh/')
        print(f'scp -P {port} {privkey_path} {username}@localhost:~/.ssh/')
        commands = [
            f'chmod 700 \${{HOME}}/.ssh',
            f'chmod 644 \${{HOME}}/.ssh/{key_name}.pub',
            f'chmod 600 \${{HOME}}/.ssh/{key_name}',
            f'chmod 600 \${{HOME}}/.ssh/authorized_keys',
            f'chmod 600 \${{HOME}}/.ssh/config',
        ]
        command = ";".join(commands)
        print(f'ssh {username}@localhost -p {port} \"{command}\"')

    def CreateVMScript(self):
        vm_name = input('Enter VM name: ')
        vm = QemuVM(vm_name)

        #Create & attach disks
        should_ask = True
        while should_ask:
            new_disk = input('Would you like to create a new disk? (yes/no): ')
            if new_disk[0] == 'y' or new_disk[0] == 'Y':
                disk_name = input('Name of the disk: ')
                disk_size = input('Size of the disk (K/M/G): ')
                disk_type = input('Type of the disk (sata/nvme/pmem): ')
                self.CreateDisk(disk_name, disk_size)
                vm.AttachDisk(disk_type, disk_name)
            elif new_disk[0] == 'n' or new_disk[0] == 'N':
                should_ask = False
            else:
                print('Invalid input')

        #Clone & attach disks
        should_ask = True
        while should_ask:
            clone_disk = input('Would you like to clone an existing disk? (yes/no): ')
            if clone_disk[0] == 'y' or clone_disk[0] == 'Y':
                disk_name = input('Name of the existing disk: ')
                new_disk_name = input('Name of the clone: ')
                disk_type = input('Type of the disk (sata/nvme/pmem): ')
                self.CloneDisk(disk_name, new_disk_name)
                vm.AttachDisk(disk_type, new_disk_name)
            elif clone_disk[0] == 'n' or clone_disk[0] == 'N':
                should_ask = False
            else:
                print('Invalid input')

        #Set SSH forwarding
        ssh_port = input('SSH port: ')
        vm.SetSSHForwarding(ssh_port)

        #Set CPU cores
        num_cpus = input('Number of CPU cores: ')
        vm.SetNumCPU(num_cpus)

        #Set RAM
        ram = input('Amount of RAM (K/M/G): ')
        vm.SetRAM(ram)

        #Set the graphics interface
        graphics = input('Set the graphcs backend (none/gtk): ')
        vm.SetGraphics(graphics)

        #Set install media (if applicable)
        iso = input('Set the path to the OS image file (skip if none): ')
        if iso is not None or iso == '':
            print(f'Inserting ISO: {iso}')
            vm.InsertISO(iso)

        vm.SaveSchema()



if __name__ == "__main__":
    args = ArgumentParser().run()
    if args.option == 'new_disk':
        QemuManager().CreateDisk(args.inputs[0], args.inputs[1])
    elif args.option == 'clone_disk':
        QemuManager().CloneDisk(args.inputs[0], args.inputs[1])
    elif args.option == 'rm_disk':
        QemuManager().RemoveDisk(args.inputs[0])
    elif args.option == 'new_vm':
        QemuManager().CreateVM(args.inputs[0])
    elif args.option == 'clone_vm':
        QemuManager().CloneVM(args.inputs[0], args.inputs[1])
    elif args.option == 'start_vm':
        QemuManager().StartVM(args.inputs[0])
    elif args.option == 'rm_vm':
        QemuManager().RemoveVM(args.inputs[0])
    elif args.option == 'list_vms':
        QemuManager().ListVMs()
    elif args.option == 'list_disks':
        QemuManager().ListDisks(args.inputs)
    elif args.option == 'attach_disk':
        QemuManager().AttachDisk(args.inputs[0], args.inputs[1], args.inputs[2])
    elif args.option == 'detach_disk':
        QemuManager().DetachDisk(args.inputs[0], args.inputs[1])
    elif args.option == 'insert_iso':
        QemuManager().InsertISO(args.inputs[0], args.inputs[1])
    elif args.option == 'rm_iso':
        QemuManager().RemoveISO(args.inputs[0], args.inputs[1])
    elif args.option == 'ssh_forward':
        QemuManager().SetSSHForwarding(args.inputs[0], args.inputs[1])
    elif args.option == 'set_ram':
        QemuManager().SetRAM(args.inputs[0], args.inputs[1])
    elif args.option == 'set_cores':
        QemuManager().SetNumCPU(args.inputs[0], args.inputs[1])
    elif args.option == 'set_graphics':
        QemuManager().SetGraphics(args.inputs[0], args.inputs[1])
    elif args.option == 'ssh':
        QemuManager().SSH(args.inputs[0], args.inputs[1])
    elif args.option == 'install_keys':
        QemuManager().InstallKeys(args.inputs[0], args.inputs[1], args.inputs[2], args.inputs[3])
    elif args.option == 'new_vm_script':
        QemuManager().CreateVMScript()
    else:
        print("Invalid option: {}".format(args.option))
        args.help()
